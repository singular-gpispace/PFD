version="v0.0.1";
category="Algebraic geometry";
info="demo";

proc pfd_singular_filename (string matrixname, string suffix, int row, int col)
{
  string filename = pfd_singular_filename_no_suffix (matrixname, row, col)
                    + "." + suffix;
  return (filename);
}

proc pfd_singular_filename_no_suffix (string matrixname, int row, int col)
{
  string filename = matrixname
                  + "_" + string(row)
                  + "_" + string(col);
  return (filename);
}


proc pfd_singular_compute (in_struct input)
{
  string filename = pfd_singular_filename( input.matrixname
                                     , input.suffix
                                     , input.row
                                     , input.col);
  pfdSingleEntry(filename, input.fromdir, input.todir);

  out_struct output;
  output.result = "success!";
  return(output);
}

proc pfd_singular_general_prepare (in_struct input, int id, string tmpdir, string terms_name)
{
  if (pfd_singular_is_already_computed(input)) {
    return(1);
  }

  pfd_singular_prepareSingleEntryFraction(input);

  def triv = pfd_singular_is_trivial(input);
  if (typeof(triv) == "out_struct") {
    return (2);
  }

  pfd_singular_prepare_input(input, id, tmpdir, terms_name);

  return (0);
}

proc pfd_singular_is_already_computed (in_struct input)
{
  //execute("ring r = " + input.neededring);
  string filename = pfd_singular_filename_no_suffix( input.matrixname
                                               , input.row
                                               , input.col);

  list args = parsePfdSingleEntryArgs(input.fromdir, input.todir);
  string from_dir = args[1];
  string to_dir = args[2];

  if (file_exists(to_dir + "result_" + filename + ".txt")) {
    return(1);
  } else {
    return(0);
  }
}

proc pfd_singular_prepareSingleEntryFraction (in_struct input)
{
  list args = parsePfdSingleEntryArgs(input.fromdir, input.todir);
  string from_dir = args[1];
  string to_dir = args[2];
  int ignore_nonlin = args[3];

  if (input.suffix == "txt") {
    execute("ring r = " + input.neededring);
    string filename = pfd_singular_filename_no_suffix( input.matrixname
                                                 , input.row
                                                 , input.col);
    prepareSingleEntryFraction( filename
                              , from_dir
                              , ignore_nonlin
                              );
  }
  if (!file_exists( from_dir + pfd_singular_filename( input.matrixname
                                                , "ssi"
                                                , input.row
                                                , input.col)
                                                )
                  ) {
    ERROR("Preparation of ssi failed");
  }
}


proc pfd_singular_is_trivial (in_struct input)
{
  system("--ticks-per-sec",1000);
  short = 0;

  list args = parsePfdSingleEntryArgs(input.fromdir, input.todir);
  string from_dir = args[1];
  string to_dir = args[2];
  int ignore_nonlin = args[3];

  string filename = pfd_singular_filename_no_suffix( input.matrixname
                                               , input.row
                                               , input.col);
  list fraction = read("ssi:r " + from_dir + filename + ".ssi");
  list nonlin = prepareNonLin(fraction, ignore_nonlin);

  int t = rtimer;

  poly f = fraction[1];
  if(typeof(fraction[2])=="list") {
    list g=fraction[2];
  } else {
    poly g=fraction[2];
  }

  int debug=0;
  //link l=":a "+string(debug)+"_log_"+datetime()+".txt";
  link l=":w ";

  if(debug)
  {
    fprintf(l,"debug: %s", debug);
    fprintf(l,"size(string(f)) = %s, size(string(g)) = %s %n",
               size(string(f)), size(string(g)), 0);
  }

  if(typeof(g)=="poly") {
    if(deg(g)==0) {
      // trivial degree for g
      list dec = list(ideal(),list(list(f/g,intvec(0:0),intvec(0:0))));
      if(debug)
        {fprintf(l,"%ntotal: 0 ms (denominator was constant)",0); close(l);}
      if(voice<=printlevel) {displaypfd(dec);}
      //return(dec);
    }
  }

  if(typeof(g)=="list") {
    if(size(g[1])==0) {
      list dec = list(ideal(),list(list(f,intvec(0:0),intvec(0:0))));
      if(debug)
        {fprintf(l,"%ntotal: 0 ms (denominator was constant)",0); close(l);}
      if(voice<=printlevel) {displaypfd(dec);}
      //return(dec);
    }
  }

  if(f==0) {
    // trivial case
    list dec = list(ideal(),list(list(poly(0),intvec(0:0),intvec(0:0))));
    if(debug)
      {fprintf(l,"%ntotal: 0 ms (numerator was 0)",0); close(l);}
    if(voice<=printlevel) {displaypfd(dec);}
    //return(dec);
  }
  if (!defined(dec)) {
    return (0);
  } else {
    // dec is defined in one of the trivial cases is trivial
    t = rtimer-t;

    list result = dec;

    write(":w "+to_dir+"resources_"+filename+".txt",
          sprintf("Time for Trivial: %s ms,  Memory: %s Bytes",t,memory(2)));

    // output as Singular objects
    if(ignore_nonlin)
      {write("ssi:w "+to_dir+"result_"+filename+".ssi",list(nonlin,result));}
    else
      {write("ssi:w "+to_dir+"result_"+filename+".ssi",result);}

    if (ignore_nonlin) {
      write_pfd_as_txt(result, to_dir, filename, nonlin);
    } else {
      write_pfd_as_txt(result, to_dir, filename, list(list(),list()));
    }

    out_struct output;
    output.result = "success! (trivial problem)";
    return(output);
  }
}

proc pfd_singular_prepare_input (in_struct input, int id, string tmpdir, string terms_name)
{
  system("--ticks-per-sec",1000);
  short = 0;

  list args = parsePfdSingleEntryArgs(input.fromdir, input.todir);
  string from_dir = args[1];
  string to_dir = args[2];
  int ignore_nonlin = args[3];

  string filename = pfd_singular_filename_no_suffix( input.matrixname
                                               , input.row
                                               , input.col);
  list fraction = read("ssi:r " + from_dir + filename + ".ssi");
  list nonlin = prepareNonLin(fraction, ignore_nonlin);


  poly f = fraction[1];
  if(typeof(fraction[2])=="list") {
    list g=fraction[2];
  } else {
    poly g=fraction[2];
  }

  int debug=0;
  link l=":w ";

  list fqem = prepare_fqem(f, g, l);

  f = fqem[1];
  ideal q = fqem[2];
  intvec e = fqem[3];
  int m = fqem[4];
  list terms = list(list(poly(f),1..m,e));
  list prepared_input = list(q, ignore_nonlin, nonlin, filename, to_dir);

  write("ssi:w " + tmpdir + "/input_" + string(id) + ".ssi", prepared_input);
  write("ssi:w " + tmpdir + "/" + terms_name +"_" + string(id) + ".ssi", terms);
}

proc get_loop_strat(string step) {
  if ((step == "NSSdecompStep") or (step == "algDependDecompStep")) {
    return ("size");
  } else{if ((step == "shortNumeratorDecompStep") or (step == "numeratorDecompStep")) {
    return ("index");
  } else {
    return ("invalid");
  }}

}

proc pfd_singular_compute_step ( int id
                           , string step
                           , string from_terms
                           , string to_terms
                           , string tmpdir
                           )
{
  system("--ticks-per-sec",1000);
  short = 0;

  int debug=0;
  link l=":w ";

  list input = read("ssi:r " + tmpdir + "/input_" + string(id) + ".ssi");
  list terms = read("ssi:r " + tmpdir + "/"  + from_terms + "_" + string(id) + ".ssi");

  ideal q = input[1];
  string filename = input[4];
  string to_dir = input[5];

  int t = rtimer;

  terms = generic_dec_loop(step, get_loop_strat(step), terms, q, debug, l);

  t = rtimer-t;
  write(":a "+to_dir+"resources_"+filename+".txt",
        sprintf(step + " Time: %s ms,  Memory: %s Bytes",t,memory(2)));
  write(":a "+tmpdir+"/"+step+"_"+string(id)+".time",
        string(t));

  write("ssi:w " + tmpdir + "/" + to_terms +"_" + string(id) + ".ssi", terms);

}

proc pfd_singular_write_result (int id, string tmpdir)
{
  system("--ticks-per-sec",1000);
  short = 0;

  int debug=0;
  link l=":w ";

  list input = read("ssi:r " + tmpdir + "/input_" + string(id) + ".ssi");
  list terms = read("ssi:r " + tmpdir + "/terms_4_" + string(id) + ".ssi");

  ideal q = input[1];
  int ignore_nonlin = input[2];
  list nonlin = input[3];
  string filename = input[4];
  string to_dir = input[5];


  if(size(terms)==1) {if(terms[1][1]==0) {terms = list();}}
  list result = list(q,terms);

  if(voice<=printlevel) {displaypfd(result);}

  // output as Singular objects
  if(ignore_nonlin)
    {write("ssi:w "+to_dir+"result_"+filename+".ssi",list(nonlin,result));}
  else
    {write("ssi:w "+to_dir+"result_"+filename+".ssi",result);}

  if (ignore_nonlin) {
    write_pfd_as_txt(result, to_dir, filename, nonlin);
  } else {
    write_pfd_as_txt(result, to_dir, filename, list(list(),list()));
  }

  out_struct output;
  output.result = "success!";
  return(output);
}

// while loop functions

proc pfd_split_terms(int id,
                     string in_filename,
                     string out_filename,
                     string tmpdir,
                     int split_max)
{
  list terms = read("ssi:r " + tmpdir + "/" + in_filename + "_" + string(id) + ".ssi");
  int term_count = size(terms);
  int split_count = min(split_max, term_count);
  int i;

  list term_lists = list();
  for(i = 1; i <= split_count; i++) {
    term_lists[i] = list();
  }
  for(i = 0; i < term_count; i++) {
    term_lists[1 + i % split_count][1 + i div split_count] = terms[1 + i];
  }

  for(i = 1; i <= split_count; i++) {
    write("ssi:w " + tmpdir + "/" + out_filename + "_" +
          string(id) + "_" + string(i) + ".ssi", term_lists[i]);
  }

  return (split_count);
}

proc pfd_fork_compute_term( int id
                          , string step
                          , string in_filepath
                          , string out_filepath
                          , string tmpdir
                          , list #
                          )
{

  system("--ticks-per-sec",1000);
  short = 0;

  int debug=0;
  link l=":w ";

  list terms = read("ssi:r " + in_filepath);
  list input = read("ssi:r " + tmpdir + "/input_" + string(id) + ".ssi");
  ideal q = input[1];

  if (size(terms) < 1) {
    ERROR("Expected at least one term, got " + string(size(terms)) +
          " instead.  Check for error in term split process.");
  }

  terms = generic_dec_loop(step, get_loop_strat(step), terms, q, debug, l);

  write("ssi:w " + out_filepath, terms);
}


proc pfd_fork_merge( int id
                   , int term_count
                   , string step
                   , string filename
                   , string tmpdir
                   )
{
  int i;
  list dec = list();

  for (i = 1; i <= term_count; i++) {
    list result = read("ssi:r " + tmpdir +
                                "/" + filename + "_result_" +
                                string(id) + "_" + string(i) +
                                ".ssi");

    dec = mergepfd(dec, result);
  }

  write( "ssi:w " + tmpdir +
                    "/" + filename + "_dec_" +
                    string(id) +
                    ".ssi"
       , dec);
}

proc pfd_fork_merge_pair( int id
                        , int left
                        , int right
                        , string filename
                        , string tmpdir
                   )
{
  list leftl = read("ssi:r " + tmpdir +
                              "/" + filename + "_result_" +
                              string(id) + "_" + string(left) +
                              ".ssi");
  list rightl = read("ssi:r " + tmpdir +
                              "/" + filename + "_result_" +
                              string(id) + "_" + string(right) +
                              ".ssi");

  leftl = mergepfd(leftl, rightl);

  write( "ssi:w " + tmpdir +
                    "/" + filename + "_result_" +
                    string(id) + "_" + string(left) +
                    ".ssi"
       , leftl);
}

proc pfd_singular_log_duration(int id,
                           bigint duration,
                           string measure_name,
                           string tmpdir)
{
  list input = read("ssi:r " + tmpdir + "/input_" + string(id) + ".ssi");
  string filename = input[4];
  string to_dir = input[5];
    write(":a "+to_dir+"resources_"+filename+".txt",
          sprintf(measure_name+" time: %s ms",duration));
}

proc mod_init() {
  // TODO: change to installed pfd library
  LIB "@PFD_SING_LIB_PATH@/pfd.lib";
}

